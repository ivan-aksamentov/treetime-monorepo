#!/usr/bin/env python
from __future__ import print_function, division, absolute_import
import sys, argparse
from homoplasy_scanner import scan_homoplasies

if __name__ == '__main__':

    parser = argparse.ArgumentParser(description = "TreeTime: Maximum Likelihood Phylodynamics")

    subparsers = parser.add_subparsers()

    ## HOMOPLASY SCANNER
    h_parser = subparsers.add_parser('homoplasies', formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                description='Reconstructs ancestral sequences and maps mutations to the tree.'
                            ' The tree is then scanned for homoplasies. An excess number of homoplasies'
                            ' might suggest contamination, recombination, culture adaptation or similar. ')

    h_parser.add_argument('--aln', required = True, type = str,  help ="fasta file with input nucleotide sequences")
    h_parser.add_argument('--tree', type = str,  help ="newick file with tree (optional if tree builders installed)")
    h_parser.add_argument('--const', type = int, default=0, help ="number of constant sites not included in alignment")
    h_parser.add_argument('--rescale', type = float, default=1.0, help ="rescale branch lengths")
    h_parser.add_argument('--detailed', required = False, action="store_true",  help ="generate a more detailed report")
    h_parser.add_argument('--gtr', required=False, type = str, default='infer', help="GTR model to use. "
        " Type 'infer' to infer the model from the data. Or, specify the model type. "
        " If the specified model requires additional options, use '--gtr_args' to specify those")

    h_parser.add_argument('--gtr-params', type=str, nargs='+', help="GTR parameters for the model "
        "specified by the --gtr argument. The parameters should be feed as 'key=value' list of parameters. "
        "Example: '--gtr K80 --gtr-params kappa=0.2 pis=0.25,0.25,0.25,0.25'. See the exact definitions of "
        " the parameters in the GTR creation methods in treetime/nuc_models.py. Only nucleotide models supported at present")

    h_parser.add_argument('--zero-based', default = False, action='store_true', help='zero based SNP indexing')
    h_parser.add_argument('-n', default = 10, type=int, help='number of mutations/nodes that are printed to screen')
    h_parser.add_argument('--verbose', default = 1, type=int, help='verbosity of output 0-6')
    h_parser.set_defaults(func=scan_homoplasies)

    ## ANCESTRAL RECONSTRUCTION
    a_parser = add_subparsers.add_parser('ancestral',  formatter_class=argparse.ArgumentDefaultsHelpFormatter,
            description='Reconstructs ancestral sequences and maps mutations to the tree.'
                        ' The output consists of a file ending with _ancestral.fasta with ancestral sequences'
                        ' and a tree ending with _mutation.nexus with mutations added as comments'
                        ' like _A45G_..., number in SNPs used 1-based index by default.'
                        ' The inferred GTR model is written to stdout')
    a_parser.add_argument('--aln', required = True, type = str,  help ="fasta file with input sequences")
    a_parser.add_argument('--tree', type = str,  help ="newick file with tree, "
                                                     "will attempt to build tree if none given.")

    a_parser.add_argument('--gtr', type = str, default='infer', help="GTR model to use. "
        " Type 'infer' to infer the model from the data. Or, specify the model type. "
        " If the specified model requires additional options, use '--gtr_args' to specify those")

    a_parser.add_argument('--gtr-params', type=str, nargs='+', help="GTR parameters for the model "
        "specified by the --gtr argument. The parameters should be feed as 'key=value' list of parameters. "
        "Example: '--gtr K80 --gtr-params kappa=0.2 pis=0.25,0.25,0.25,0.25'. See the exact definitions of "
        " the parameters in the GTR creation methods in treetime/nuc_models.py or treetime/aa_models.py")

    a_parser.add_argument('--prot', default = False, action="store_true", help ="protein alignment")
    a_parser.add_argument('--marginal', default = False, action="store_true", help ="marginal reconstruction of ancestral sequences")
    a_parser.add_argument('--zero_based', default = False, action='store_true', help='zero based SNP indexing')
    a_parser.add_argument('--keep-overhangs', default = False, action='store_true', help='do not fill terminal gaps')
    a_parser.add_argument('--verbose', default = 1, type=int, help='verbosity of output 0-6')

    ## MUGRATION


    ## CLOCKSIGNAL


    ## TIMETREE


    ## call the relevant function and return
    params = parser.parse_args()
    return_code = params.func(params)

    sys.exit(return_code)
